import dataclasses
import os
import shlex
import subprocess
import time
from typing import Optional

from consts import CUDA_FLAGS, ExitCode


@dataclasses.dataclass
class CompileResult:
    # fmt: off
    nvcc_found: bool    # did we find nvcc?
    nvcc_version: str   # the result of nvcc --version
    success: bool       # did it compile successfully
    command: str        # the command that was run to compile the code
    stdout: str         # standard output produced by the compiler
    stderr: str         # standard error produced by the compiler
    exit_code: int      # exit code produced by the compiler
    # fmt: on


@dataclasses.dataclass
class RunResult:
    # fmt: off
    success: bool       # did the compiled executable run successfully
    passed: bool        # did it pass all tests
    command: str        # the command that was run to compile the code
    stdout: str         # standard output produced by the compiler
    stderr: str         # standard error produced by the compiler
    exit_code: int      # exit code produced by the compiler
    duration: float     # execution time (NOT kernel duration)
    result: dict        # dictionary with the results generated by the tester
    # fmt: on


@dataclasses.dataclass
class FullResult:
    # fmt: off
    success: bool               # did the runner (github/modal) execute successfully
    error: str                  # if not success, an error message
    compile: CompileResult      # results of compilation
    run: RunResult              # results of running
    # fmt: on


def _make_cmd(args: list[str]):
    return " ".join(map(shlex.quote, args))


def compile_cuda_script(  # # noqa: C901
    files: list[str],
    arch: int = None,
    include_dirs: list[str] = None,
    verbose: bool = False,
) -> CompileResult:
    """
    Compiles a set of cuda files with nvcc.

    Args:
        files: List of files to compile.
        arch: Architecture to compile for. If None, uses `native`
        include_dirs: additional include directories to supply to nvcc
        verbose: whether to print progress or be silent

    Returns:
        A `CompileResult` that summarizes the compilation process.

    """
    if include_dirs is None:
        include_dirs = []

    if verbose:
        print_ = print
    else:
        print_ = lambda *args, **kwargs: None  # noqa

    # Check CUDA is available and installed correctly
    print_("[CUDA Env Check]")
    try:
        # these check cuda compiler is also available
        nvcc = subprocess.check_output(["which", "nvcc"], encoding="utf-8").strip()
        nvcc_version = subprocess.check_output(["nvcc", "--version"], encoding="utf-8")
    except subprocess.CalledProcessError as e:
        return CompileResult(
            nvcc_found=False,
            success=False,
            nvcc_version="",
            command=_make_cmd(e.cmd),
            stdout=e.stdout,
            stderr=e.stderr,
            exit_code=e.returncode,
        )

    if arch is None:
        ARCH = "-arch=native"
    else:
        ARCH = f"-gencode=arch=compute_{arch},code=sm_{arch}"

    command = [nvcc] + CUDA_FLAGS + include_dirs + files + [ARCH, "-o", "eval.out"]

    print_("[Compiling]")
    try:
        compile_process = subprocess.run(command, capture_output=True, text=True, check=True)
    except subprocess.CalledProcessError as e:
        return CompileResult(
            nvcc_found=True,
            success=False,
            nvcc_version=nvcc_version,
            command=_make_cmd(e.cmd),
            stdout=e.stdout,
            stderr=e.stderr,
            exit_code=e.returncode,
        )

    return CompileResult(
        nvcc_found=True,
        success=True,
        nvcc_version=nvcc_version,
        command=_make_cmd(compile_process.args),
        stdout=compile_process.stdout,
        stderr=compile_process.stderr,
        exit_code=compile_process.returncode,
    )


def run_program(args: list[str]) -> RunResult:
    # set up a pipe so the tester can communicate its verdict with us
    env = os.environ.copy()
    pipe_read, pipe_write = os.pipe()
    env["POPCORN_FD"] = str(pipe_write)

    execution_start_time = time.perf_counter()
    run_process = subprocess.run(
        args,
        capture_output=True,
        text=True,
        check=False,
        env=env,
        pass_fds=[pipe_write],
    )
    execution_end_time = time.perf_counter()

    # terminate output writing
    os.close(pipe_write)
    # and fetch pipe's content
    result = os.fdopen(pipe_read, "r").read()

    result_dict = {}
    for line in result.splitlines():
        key, _, value = line.partition(":")
        result_dict[key.strip()] = value.strip()

    return RunResult(
        success=(
            run_process.returncode == ExitCode.SUCCESS
            or run_process.returncode == ExitCode.VALIDATE_FAIL
        ),
        passed=result_dict.get("check", None) == "pass",
        command=_make_cmd(run_process.args),
        stdout=run_process.stdout,
        stderr=run_process.stderr,
        exit_code=run_process.returncode,
        duration=execution_end_time - execution_start_time,
        result=result_dict,
    )


def run_cuda_script(  # # noqa: C901
    script_content: str,
    reference_content: str = None,
    submission_content: str = None,
    arch: int = None,
    include_dirs: list[str] = None,
) -> tuple[CompileResult, RunResult]:
    """
    Executes the provided CUDA kernel in an isolated environment

    Args:
        script_content: The CUDA script containing the GPU kernel
        reference_content: The (optional) reference code, used for leaderboards.
        submission_content: The (optional) submission code, used for leaderboards.
        arch: The arch code for the compute/sm versions. If None, native arch is used.
        include_dirs: Additional include directories, e.g., for thunderkittens/cutlass etc

    Returns:
        tuple[CompileResult, RunResult]: CUDA compile/eval result information
    """
    if include_dirs is None:
        include_dirs = []

    try:
        # Write submission files to directory
        if reference_content is not None:
            with open("reference.cuh", "w") as f:
                f.write(reference_content)

        if submission_content is not None:
            with open("train.cuh", "w") as f:
                f.write(submission_content)

        with open("eval.cu", "w") as f:
            f.write(script_content)

        compile_result = compile_cuda_script(
            files=["eval.cu"],
            arch=arch,
            include_dirs=include_dirs,
            verbose=True,
        )

        if not compile_result.success:
            return compile_result, RunResult(
                success=False,
                passed=False,
                command="",
                stdout="",
                stderr="",
                exit_code=-1,
                duration=0.0,
                result={},
            )

        run_result = run_program(["./eval.out"])
        return compile_result, run_result

    finally:
        tmp_files = ["reference.cuh", "train.cuh", "eval.cu", "eval.out"]
        for f in tmp_files:
            if os.path.exists(f):
                os.remove(f)


def run_pytorch_script(  # noqa: C901
    script_content: str,
    reference_content: Optional[str] = None,
    submission_content: Optional[str] = None,
    arch: int = None,
) -> RunResult:
    """
    Executes the provided PyTorch GPU kernel in an isolated environment

    Args:
        script_content: The PyTorch script containing the GPU kernel to benchmark
        reference_content: The (optional) reference code, used for leaderboards.
        submission_content: The (optional) submission code, used for leaderboards.
        arch: The arch code for the compute/sm versions.

    Returns:
        RunResult
    """
    try:
        # Write submission files to directory
        if reference_content is not None:
            with open("reference.py", "w") as f:
                f.write(reference_content)

        if submission_content is not None:
            with open("train.py", "w") as f:
                f.write(submission_content)

        with open("eval.py", "w") as f:
            f.write(script_content)

        return run_program(["python", "eval.py"])

    finally:
        tmp_files = ["eval.py", "reference.py", "train.py"]
        for f in tmp_files:
            if os.path.exists(f):
                os.remove(f)
